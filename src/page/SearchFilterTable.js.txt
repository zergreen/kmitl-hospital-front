import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import moment from "moment";
import "./tableStyles.css";
import ActionButtons from "../component/ActionButtons";

import DateDropdown from "../component/DateDropdown";
import TimeSelector from "../component/TimeSelector";
import formatThaiDateTime from "../function/formatThaiDateTime";
import { renderX } from "../function/DeleteAppoint";

const SearchFilterTable = ({ data }) => {
  const [searchName, setSearchName] = useState("");
  const [reportID, setreportID] = useState("");
  const [searchStatus, setSearchStatus] = useState("waited");
  const [searchDate, setSearchDate] = useState("");
  const [filteredData, setFilteredData] = useState(data);
  const [sortOrder, setSortOrder] = useState("asc");
  const [patientName, setPatientName] = useState("");
  const [selectedDay, setSelectedDay] = useState("");
  const [selectedMonth, setSelectedMonth] = useState("");
  const [selectedYear, setSelectedYear] = useState("");
  const [selectedTime, setSelectedTime] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    setFilteredData(data);
    filterData('', '', '', searchStatus, '');
  }, [data]);

  const handleNameSearchChange = (event) => {
    const value = event.target.value;
    setSearchName(value);
    filterData(value, patientName, reportID, searchStatus, searchDate);
  };

  const handlePatientNameSearchChange = (event) => {
    const value = event.target.value;
    setPatientName(value);
    filterData(searchName, value, reportID, searchStatus, searchDate);
  };

  const handleReportIdSearch = (event) => {
    const value = event.target.value;
    setreportID(value);
    filterData(searchName, patientName, value, searchStatus, searchDate);
  };

  const handleStatusSearchChange = (event) => {
    const value = event.target.value;
    setSearchStatus(value);
    filterData(searchName, patientName, reportID, value, searchDate);
  };

  const handleDateSearchChange = (event) => {
    const value = event.target.value;
    setSearchDate(value);
    filterData(searchName, patientName, reportID, searchStatus, value);
  };

  // const formattedSelectedDate =
  //   selectedDay && selectedMonth && selectedYear
  //     ? new Date(
  //         selectedYear,
  //         selectedMonth - 1,
  //         selectedDay
  //       ).toLocaleDateString()
  //     : "";

  const handleTimeChange = (time) => {
    setSelectedTime(time);

    clickToChange(time);
  };

  const handleDateChange = (month, day, year) => {
    setSelectedMonth(month);
    setSelectedDay(day);
    setSelectedYear(year);

    // console.log(day);
    // console.log(year);
    // console.log(month);

    const formattedSelectedDate =
      day && year && month
        ? new Date(year, month - 1, day).toLocaleDateString()
        : "";

    // console.log(formattedSelectedDate);

    // const greenDate = year + "-" + month + "-" + day;
    const outputFormat = "YYYY-MM-DD";
    const greenDate = moment
      .utc(formattedSelectedDate, "DD/MM/YYYY")
      .startOf("hour")
      .format(outputFormat);

    // console.log(greenDate);

    setSearchDate(greenDate);
    filterData(searchName, patientName, reportID, searchStatus, greenDate);
  };

  const clickToChange = async (time) => {
    const formattedSelectedDate =
      selectedDay && selectedMonth && selectedYear
        ? new Date(
            selectedYear,
            selectedMonth - 1,
            selectedDay
          ).toLocaleDateString()
        : "";

    const green = formattedSelectedDate + " " + time;

    const outputFormat = "YYYY-MM-DDTHH:mm:ss.SSS[Z]";
    const formattedDate1 = moment
      .utc(green, "DD/MM/YYYY H-mm")
      .startOf("hour")
      .format(outputFormat);

    const regex = /^(\d{4}-\d{2}-\d{2})/;
    const match = formattedDate1.match(regex);
    const result = match && match[1];

    setSearchDate(result);
    filterData(searchName, patientName, reportID, searchStatus, formattedDate1);
  };

  const filterData = (Employee_name, Patient_name, Report_ID, Status, date) => {
    const filteredResults = data.filter(
      (item) =>
        (item.Employee_name.toLowerCase().includes(
          Employee_name.toLowerCase()
        ) ||
          item.Employee_ID.toString().includes(Employee_name)) &&
        item.Report_ID.toString().includes(Report_ID) &&
        (item.Patient_name.toString().includes(Patient_name) ||
          item.Patient_lname.toString().includes(Patient_name) ||
          item.Patient_Citizen.toString().includes(Patient_name) ||
          item.Patient_ID.toString().includes(Patient_name)) &&
        (Status === "" || item.Status.toLowerCase() === Status.toLowerCase()) &&
        item.Report_Date.includes(date)
    );
    setFilteredData(filteredResults);
  };

  const handleStatusToChange = () => {
    const newStatus = sortOrder === "asc" ? "waited" : "canceled";
    filterData(searchName, patientName, reportID, newStatus, searchDate);
    setSortOrder(sortOrder === "asc" ? "desc" : "asc");
  };

  const handleSortByDate = () => {
    const sortedData = [...filteredData].sort((a, b) => {
      const dateA = new Date(a.Report_Date);
      const dateB = new Date(b.Report_Date);
      return sortOrder === "asc" ? dateA - dateB : dateB - dateA;
    });
    setFilteredData(sortedData);
    setSortOrder(sortOrder === "asc" ? "desc" : "asc");
  };

  const goreportbyid = (value) => {
    navigate("/reportbyid/" + value);
  };

  const clear = () => {
    setSearchName("");
    setreportID("");
    setSearchStatus("");
    setSearchDate("");
    setPatientName("");
    filterData("", "", "", "", "");
  };

  const renderReportDate = (
    status,
    report_date,
    report_id,
    emp_id,
    emp_name,
    patient_name
  ) => {
    const formattedThaiDateTime = formatThaiDateTime(report_date);

    const goedit = () => {
      if (status !== "confirm") {
        console.log(status);
        navigate("/appoint-edit", {
          state: {
            id: report_id,
            status,
            date: report_date,
            emp_id,
            emp_name,
            patient_name,
          },
        });
      }
    };

    if (status !== "confirm") {
      return (
        <button style={{ backgroundColor: "#FF8C00" }} onClick={() => goedit()}>
          &#9998;{formattedThaiDateTime}
        </button>
      );
    } else if ((status = "canceled")) {
      return (
        <button style={{ backgroundColor: "#7FFFD4" }}>
          &#10003;{formattedThaiDateTime}
        </button>
      );
    }
  };

  const renderStatus = (status) => {
    if (status === "waited") {
      return <p style={{ color: "#FFD700" }}>waited</p>;
    } else if (status === "canceled") {
      return <p style={{ color: "red" }}>canceled</p>;
    } else {
      return <p style={{ color: "green" }}>confirm</p>;
    }
  };

  const show = (value) => {
    setSearchName(value);
    filterData(value, patientName, reportID, searchStatus, searchDate);
  };

  const showPname = (value) => {
    setPatientName(value);
    filterData(searchName, value, reportID, searchStatus, searchDate);
  };

  return (
    <div>
      <button onClick={clear} style={{ backgroundColor: "Pink" }}>
        CLEAR-INPUT
      </button>

      <div className="mb-4">
        <div className="border-l-4 border-orange-600 pl-1.5 ">
          <p className="font-roboto font-bold text-xl text-gray-700 mb-3.5">
            เลือกวันที่
          </p>
        </div>
        <DateDropdown
          selectedDate={{
            day: selectedDay,
            month: selectedMonth,
            year: selectedYear,
          }}
          onDateChange={handleDateChange}
        />
      </div>
      <div className="mb-4">
        <div className="border-l-4 border-orange-600 pl-1.5 ">
          <p className="font-roboto font-bold text-xl text-gray-700 mb-3.5">
            เลือกเวลา
          </p>
        </div>
        <TimeSelector
          selectedTime={selectedTime}
          onTimeChange={handleTimeChange}
        />
      </div>

      <input
        type="text"
        placeholder="Search by Doctor Name or Doctor ID..."
        value={searchName}
        onChange={handleNameSearchChange}
      />

      <input
        type="text"
        placeholder="Search by Patiend Name or Citizen ID or Patient ID..."
        value={patientName}
        onChange={handlePatientNameSearchChange}
      />

      <input
        type="text"
        placeholder="Search by Report ID..."
        value={reportID}
        onChange={handleReportIdSearch}
      />

      <input
        type="text"
        placeholder="Search by Date..."
        value={searchDate}
        onChange={handleDateSearchChange}
      />

      <select value={searchStatus} onChange={handleStatusSearchChange}>
        <option value="">All Status</option>
        <option value="waited">Waited</option>
        <option value="canceled">Cancel</option>
        <option value="confirm">Confirm</option>
      </select>

      {/* {renderRadio()} */}

      <div className="relative overflow-x-auto">
        <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400">
          {/* <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"> */}
          <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
              <th scope="col" className="px-6 py-3">
                ID
              </th>
              <th scope="col" className="px-6 py-3">
                Doctor_Name
              </th>
              <th scope="col" className="px-6 py-3">
                Patient_name
              </th>
              <th scope="col" className="px-6 py-3">
                Report_ID
              </th>
              <th scope="col" className="px-6 py-3">
                {
                  <button onClick={handleSortByDate}>
                    Report_Date &#8661;
                  </button>
                }
              </th>
              <th scope="col" className="px-6 py-3">
                {<button onClick={handleStatusToChange}>Status &#8661;</button>}
              </th>
              <th scope="col" className="px-6 py-3">
                Symptom
              </th>
              <th scope="col" className="px-6 py-3">
                Action
              </th>
            </tr>
          </thead>
          <tbody>
            {filteredData.map((item, index) => (
              // <tr
              //   className="bg-white border-b dark:bg-gray-800 dark:border-gray-700"
              //   key={item.Appoint_ID}
              // >
              //   <th
              //     scope="row"
              //     className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white"
              //   >
              <tr className="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600"
                  key={item.Appoint_ID}>
                <th
                  scope="row"
                  className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white"
                
                >
                  {/* {index + 1} */}
                  {item.Appoint_ID}
                </th>
                <td className="px-6 py-4">
                  <button onClick={() => show(item.Employee_name)}>
                    Dr. {item.Employee_name} {item.Employee_Lname}
                  </button>
                </td>
                <td className="px-6 py-4">
                  <button onClick={() => showPname(item.Patient_name)}>
                    {item.Patient_name} {item.Patient_lname}
                  </button>
                </td>
                <td className="px-6 py-4">
                  <button onClick={() => goreportbyid(item.Report_ID)}>
                    {item.Report_ID}
                  </button>
                </td>
                <td className="px-6 py-4">
                  {renderReportDate(
                    item.Status,
                    item.Report_Date,
                    item.Report_ID,
                    item.Employee_ID,
                    item.Employee_name + " " + item.Employee_Lname,
                    item.Patient_name + " " + item.Patient_lname
                  )}
                </td>
                <td className="px-6 py-4">{renderStatus(item.Status)}</td>
                <td className="px-4 py-4">{item.Symptom}</td>
                <td className="px-6 py-4">
                  <ActionButtons
                    id={item.Report_ID}
                    name={item.Employee_name}
                    age={item.report_id}
                    status={item.Status}
                    date={item.Report_Date}
                  />
                  {renderX(item.Appoint_ID)}
                  {/* {() => deleteAppoint(item.Report_ID)} */}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default SearchFilterTable;
